{"version":3,"sources":["api/movies.js","utils/constants.js","actions/movies.js","containers/Header/index.js","components/Loader/index.js","components/MessageBox/index.js","components/MoviesList/index.js","containers/App/index.js","reducers/Movies.js","configureStore.js","index.js","reducers/index.js"],"names":["API_BASE_URL","Object","assign","FALLBACK_ERROR_MESSAGE","development","production","process","REACT_APP_ENV","getMoviesList","query","dispatch","type","queryObj","queryStringData","queryString","stringify","fetch","then","res","json","fetchMovies","data","getMoviesListSuccess","error","errorCb","getMoviesListFailure","getGenresList","getGenresListSuccess","getGenresListFailure","getLanguagesList","getLanguagesListSuccess","getLanguagesListFailure","setFilter","filter","value","setFilterData","Header","props","onFilterSet","e","target","actions","filters","LangaugeFilter","EventLanguage","GenreFilter","EventGenre","console","log","className","this","LanguagesList","name","onChange","map","language","GenresList","genres","React","PureComponent","connect","Movies","IsLanguagesLoading","getIn","LanguagesError","IsGenresLoading","GenresError","moviesActions","bindActionCreators","text","MoviesList","state","selectedTrailer","trailerBoxEle","setRowTrailerActive","currentTarget","getElementsByClassName","innerHTML","setState","setTimeout","onSelect","trailerURL","selectedItemEle","classList","remove","add","listEleWidth","listRefEle","offsetWidth","itemsPerRow","Math","floor","grouped","reduce","acc","movie","ind","index","parseInt","push","key","onClick","TrailerURL","src","EventCode","alt","EventName","nextProps","ref","ele","keys","row","Component","App","IsLoading","Loader","IsError","MessageBox","length","AppliedFilters","initialState","fromJS","list","isFetching","languages","selected","action","mergeIn","message","setIn","logger","createLogger","collapsed","store","middlewares","thunk","enhancers","applyMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","combineReducers","createReducer","injectedReducers","configureStore","MOUNT_NODE","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.beca7924.chunk.js","sourcesContent":["import queryString from 'query-string';\nimport CONSTANTS from './../utils/constants';\n\nconst { API_BASE_URL } = CONSTANTS;\n\nexport const fetchMovies = queryObj => {\n  const queryStringData = queryString.stringify(queryObj);\n  return fetch(`${API_BASE_URL}/list?${queryStringData}`)\n    .then(res => res.json());\n};\n\nexport const fetchLanguages = () => fetch(`${API_BASE_URL}/languages`)\n  .then(res => res.json());\n\nexport const fetchGenres = () => fetch(`${API_BASE_URL}/genres`)\n  .then(res => res.json());\n","const APP_CONSTANTS = {};\n\nconst API_CONSTANTS = {\n  FALLBACK_ERROR_MESSAGE: 'Something went wrong. Please try again later!',\n  API_BASE_URL: 'https://afficiona-movies.herokuapp.com',\n};\nconst ENV_CONSTANTS = {\n  development: {},\n  production: {},\n};\n\nexport default Object.assign(APP_CONSTANTS, API_CONSTANTS, ENV_CONSTANTS[process.env.REACT_APP_ENV]);\n","import { fetchMovies, fetchLanguages, fetchGenres } from './../api/movies';\n\nfunction getMoviesListRequest() {\n  return {\n    type: 'FETCH_MOVIES_LIST_INIT',\n  };\n}\n\nfunction getMoviesListSuccess(data) {\n  return {\n    type: 'FETCH_MOVIES_LIST_SUCCESS',\n    data,\n  };\n}\n\nfunction getMoviesListFailure(error, errorCb) {\n  return {\n    type: 'FETCH_MOVIES_LIST_ERROR',\n    error,\n  };\n}\n\nconst getMoviesList = (query) => dispatch => {\n  dispatch(getMoviesListRequest());\n  return fetchMovies(query).then(\n    data => dispatch(getMoviesListSuccess(data)),\n    error => dispatch(getMoviesListFailure(error)),\n  );\n};\n\nfunction getLanguagesListRequest() {\n  return {\n    type: 'FETCH_LANGUAGES_LIST_INIT',\n  };\n}\n\nfunction getLanguagesListSuccess(data) {\n  return {\n    type: 'FETCH_LANGUAGES_LIST_SUCCESS',\n    data,\n  };\n}\n\nfunction getLanguagesListFailure(error, errorCb) {\n  return {\n    type: 'FETCH_LANGUAGES_LIST_ERROR',\n    error,\n  };\n}\n\nconst getLanguagesList = () => dispatch => {\n  dispatch(getLanguagesListRequest());\n  return fetchLanguages().then(\n    data => dispatch(getLanguagesListSuccess(data)),\n    error => dispatch(getLanguagesListFailure(error)),\n  );\n};\n\nfunction getGenresListRequest() {\n  return {\n    type: 'FETCH_GENRES_LIST_INIT',\n  };\n}\n\nfunction getGenresListSuccess(data) {\n  return {\n    type: 'FETCH_GENRES_LIST_SUCCESS',\n    data,\n  };\n}\n\nfunction getGenresListFailure(error, errorCb) {\n  return {\n    type: 'FETCH_GENRES_LIST_ERROR',\n    error,\n  };\n}\n\nconst getGenresList = () => dispatch => {\n  dispatch(getGenresListRequest());\n  return fetchGenres().then(\n    data => dispatch(getGenresListSuccess(data)),\n    error => dispatch(getGenresListFailure(error)),\n  );\n};\n\nfunction setFilterData(filter, value) {\n  return {\n    type: 'SET_FILTER',\n    filter,\n    value,\n  };\n}\n\nconst setFilter = (filter, value) => dispatch => {\n  dispatch(setFilterData(filter, value));\n};\n\nexport default {\n  getMoviesList,\n  getGenresList,\n  getLanguagesList,\n  setFilter,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport moviesActions from './../../actions/movies';\n\nimport './styles.scss';\n\nclass Header extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onFilterSet = (e, type) => {\n      const { value } = e.target;\n      this.props.actions.setFilter(type, value);\n\n      const filters = {};\n      if (this.props.LangaugeFilter) {\n        filters.EventLanguage = this.props.LangaugeFilter;\n      }\n      if (this.props.GenreFilter) {\n        filters.EventGenre = this.props.GenreFilter;\n      }\n      console.log(this.props.LangaugeFilter, this.props.GenreFilter);\n      this.props.actions.getMoviesList({\n        ...filters,\n        [type]: value\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app__header\">\n        {this.props.LanguagesList && (\n          <div className=\"app__header__toolbar\">\n            <select name=\"languageFilter\" onChange={e => this.onFilterSet(e, 'EventLanguage')}>\n              {this.props.LanguagesList.map(language => (\n                <option value={language}>{language}</option>\n              ))}\n            </select>\n          </div>\n        )}\n        {this.props.GenresList && (\n          <div className=\"app__header__toolbar\">\n            <select name=\"genreFilter\" onChange={e => this.onFilterSet(e, 'EventGenre')}>\n              {this.props.GenresList.map(genres => (\n                <option value={genres}>{genres}</option>\n              ))}\n            </select>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  \n};\n\nfunction mapStateToProps({ Movies }) {\n  return {\n    IsLanguagesLoading: Movies.getIn(['filters', 'languages', 'isFetching']),\n    LanguagesError: Movies.getIn(['filters', 'languages', 'error']),\n    LanguagesList: Movies.getIn(['filters', 'languages', 'data']),\n\n    IsGenresLoading: Movies.getIn(['filters', 'genres', 'isFetching']),\n    GenresError: Movies.getIn(['filters', 'genres', 'error']),\n    GenresList: Movies.getIn(['filters', 'genres', 'data']),\n\n    LangaugeFilter: Movies.getIn(['filters', 'selected', 'EventLanguage']),\n    GenreFilter: Movies.getIn(['filters', 'selected', 'EventGenre']),\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  const actions = {\n    ...moviesActions,\n  };\n  return {\n    actions: bindActionCreators(actions, dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Header);\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './styles.scss';\n\nclass Header extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"app__loader\">\n        Fetching movies list...\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  \n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './styles.scss';\n\nclass Header extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"message-box\">\n        {this.props.text}\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  \n};\n\nexport default Header;\n","/**\n *\n * App.js\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.scss';\n\nimport MessageBox from './../../components/MessageBox';\n\nexport class MoviesList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedTrailer: null,\n      trailerBoxEle: null\n    }\n\n    this.setRowTrailerActive = e => {\n      const trailerBoxEle = e.currentTarget.getElementsByClassName('app__list__trailer-box')[0];\n      // Deactivating the current trailer box\n      if (this.state.trailerBoxEle && this.state.trailerBoxEle !== trailerBoxEle) {\n        this.state.trailerBoxEle.innerHTML = '';\n      }\n      this.setState({ trailerBoxEle });\n      setTimeout(() => {\n        trailerBoxEle.innerHTML = `<iframe id=\"ytplayer\" height=\"360\" type=\"text/html\" src=\"${this.state.selectedTrailer}?autoplay=1\" frameborder=\"0\" />;`;\n      }, 0);\n    }\n\n    this.onSelect = (e, trailerURL) => {\n      if (this.state.selectedItemEle) {\n        this.state.selectedItemEle.classList.remove('app__list__item--active');\n      }\n      e.currentTarget.classList.add('app__list__item--active');\n      this.setState({\n        selectedItemEle: e.currentTarget,\n        selectedTrailer: trailerURL\n      });\n    }\n  }\n\n  componentDidMount() {\n    const listEleWidth = this.listRefEle.offsetWidth;\n    const itemsPerRow = Math.floor(listEleWidth / 240);\n    const grouped = this.props.data.reduce((acc, movie, ind) => {\n      var index = parseInt(ind / itemsPerRow);\n      acc[index] = acc[index] || [];\n      acc[index].push((\n        <div className=\"app__list__item\" key={ind} onClick={e => this.onSelect(e, movie.TrailerURL)}>\n          <div className=\"app__list__item__media\">\n            <img src={`https://in.bmscdn.com/events/moviecard/${movie.EventCode}.jpg`} alt={movie.EventName} />\n          </div>\n          <div className=\"app__list__item__title\">{movie.EventName}</div>\n        </div>\n      ));\n      return acc;\n    }, {});\n\n    this.setState({ grouped });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    \n  }\n\n  render() {\n    return (\n      <div className=\"app__list\" ref={ele => this.listRefEle = ele}>\n        <div className=\"app__list__filters\">Applied Filters: {this.props.filters}</div>\n        <div className=\"app__list__wrapper\">\n          {this.state.grouped && Object.keys(this.state.grouped).map(row => {\n              return (\n                <div className=\"app__list__row__wrapper\" key={row} onClick={this.setRowTrailerActive}>\n                  <div className=\"app__list__trailer-box\"></div>\n                  <div className=\"app__list__row\">\n                    {\n                      this.state.grouped[row]\n                    }\n                  </div>\n                </div>\n              );\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nMoviesList.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n\nexport default MoviesList;\n","/**\n *\n * App.js\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport './styles.scss';\nimport moviesActions from './../../actions/movies';\n\nimport Header from './../Header';\nimport Loader from './../../components/Loader';\nimport MoviesList from './../../components/MoviesList';\nimport MessageBox from './../../components/MessageBox';\n\nexport class App extends React.Component {\n  componentWillMount() {\n    this.props.actions.getMoviesList();\n    this.props.actions.getLanguagesList();\n    this.props.actions.getGenresList();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    \n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        \n        <div className=\"app__content\">\n          {(() => {\n            if (this.props.IsLoading) {\n              return <Loader />\n            }\n\n            if (this.props.IsError) {\n              return <MessageBox text=\"Something went wrong!\" />\n            }\n\n            if (!this.props.MoviesList.length) {\n              return <MessageBox text=\"No movies list found. Search again!\" />\n            }\n\n            return (\n              <MoviesList data={this.props.MoviesList} filters={this.props.AppliedFilters} />\n            )\n          })()}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  actions: PropTypes.object.isRequired,\n};\n\nfunction mapStateToProps({ Movies }) {\n  const AppliedFilters = [Movies.getIn(['filters', 'selected', 'language']), Movies.getIn(['filters', 'selected', 'genre'])];\n  return {\n    IsLoading: Movies.getIn(['list', 'isFetching']),\n    IsError: Movies.getIn(['list', 'error']),\n    MoviesList: Movies.getIn(['list', 'data']),\n    AppliedFilters,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  const actions = {\n    ...moviesActions,\n  };\n  return {\n    actions: bindActionCreators(actions, dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","import { fromJS } from 'immutable';\n\nimport { normalizeLanguagesList, normalizeMoviesList } from './../normalizers/movies';\n\nconst initialState = fromJS({\n  list: {\n    isFetching: true,\n    error: null,\n    data: null,\n  },\n  filters: {\n    languages: {\n      isFetching: true,\n      error: null,\n      data: null,\n    },\n    genres: {\n      isFetching: true,\n      error: null,\n      data: null,\n    },\n    selected: {\n      EventLanguage: null,\n      EventGenre: null\n    }\n  }\n});\n\nexport default (state = initialState, action = {}) => {\n  switch (action.type) {\n    case 'FETCH_MOVIES_LIST_INIT':\n      return state.mergeIn(['list'], {\n        error: null,\n        data: null,\n        isFetching: true,\n      });\n\n    case 'FETCH_MOVIES_LIST_SUCCESS':\n      return state.mergeIn(['list'], {\n        error: null,\n        data: action.data,\n        isFetching: false,\n      });\n\n    case 'FETCH_MOVIES_LIST_ERROR':\n      return state.mergeIn(['list'], {\n        error: action.error.message,\n        data: null,\n        isFetching: false,\n      });\n\n    case 'FETCH_LANGUAGES_LIST_INIT':\n      return state.mergeIn(['filters', 'languages'], {\n        error: null,\n        data: null,\n        isFetching: true,\n      });\n\n    case 'FETCH_LANGUAGES_LIST_SUCCESS':\n      return state.mergeIn(['filters', 'languages'], {\n        error: null,\n        data: action.data,\n        isFetching: false,\n      });\n\n    case 'FETCH_LANGUAGES_LIST_ERROR':\n      return state.mergeIn(['filters', 'languages'], {\n        error: action.error.message,\n        data: null,\n        isFetching: false,\n      });\n\n    case 'FETCH_GENRES_LIST_INIT':\n      return state.mergeIn(['filters', 'genres'], {\n        error: null,\n        data: null,\n        isFetching: true,\n      });\n\n    case 'FETCH_GENRES_LIST_SUCCESS':\n      return state.mergeIn(['filters', 'genres'], {\n        error: null,\n        data: action.data,\n        isFetching: false,\n      });\n\n    case 'FETCH_GENRES_LIST_ERROR':\n      return state.mergeIn(['filters', 'genres'], {\n        error: action.error.message,\n        data: null,\n        isFetching: false,\n      });\n\n    case 'SET_FILTER':\n      return state.setIn(['filters', 'selected', action.filter], action.value);\n\n    default:\n      return state;\n  }\n};\n","/**\n * Create the store with dynamic reducers\n */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport createReducer from './reducers/index';\n\nconst logger = createLogger({\n  collapsed: true,\n});\n\nexport default function configureStore(initialState = {}, history) {\n  // Create the store with two middlewares\n  const middlewares = [thunk, logger];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  /* eslint-disable no-underscore-dangle, indent */\n  const composeEnhancers =\n    process.env.REACT_APP_ENV !== 'production' && typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n      : compose;\n  /* eslint-enable */\n\n  const store = createStore(createReducer(), initialState, composeEnhancers(...enhancers));\n\n  // Extensions\n  store.injectedReducers = {}; // Reducer registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers/index.js', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}\n","/**\n * app.js\n *\n * This is the entry file for the application, only setup and boilerplate\n * code.\n */\n\n// Import all the third party stuff\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n// Import root app\nimport App from './containers/App';\nimport './App.scss';\n\nimport configureStore from './configureStore';\n\n// Create redux store\nconst initialState = {};\nconst store = configureStore(initialState);\nconst MOUNT_NODE = document.getElementById('root');\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    MOUNT_NODE,\n  );\n};\n\nrender();\n","import { combineReducers } from 'redux';\n\nimport Movies from './Movies';\n\nexport default function createReducer(injectedReducers = {}) {\n  const rootReducer = combineReducers({\n    Movies,\n  });\n\n  return rootReducer;\n}\n"],"sourceRoot":""}